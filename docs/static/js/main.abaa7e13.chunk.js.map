{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetch.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","className","type","placeholder","id","onClick","e","preventDefault","searchInputRef","document","querySelector","inputValue","value","length","cats","Swal","fire","title","text","icon","confirmButtonText","getGifs","category","a","process","url","encodeURI","fetch","resp","json","data","gifs","map","gif","images","downsized","console","log","GifGridItem","src","alt","GifGrid","query","useState","loading","state","setState","useEffect","then","useFetch","img","GifExpertApp","defaultCategories","categories","i","ReactDOM","render","getElementById"],"mappings":"sNAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAqB5B,OACE,+BACE,sBAAKC,UAAU,YAAf,UACE,uBACEC,KAAK,OACLC,YAAY,eACZC,GAAG,gBAEL,wBAAQC,QA3BQ,SAACC,GACrBA,EAAEC,iBAEF,IAAMC,EAAiBC,SAASC,cAAc,gBAChCC,EAAeH,EAArBI,MAEJD,EAAWE,OAAS,GACtBb,GAAe,SAACc,GAAD,OAAYH,GAAZ,mBAA4BG,OAC3CN,EAAeI,MAAQ,IAEvBG,IAAKC,KAAK,CACRC,MAAO,SACPC,KAAM,kBACNC,KAAM,QACNC,kBAAmB,QAanB,4B,gCCjCKC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACNC,mCADM,SAGbC,EAHa,iDAGoCC,UAAUJ,GAH9C,6BACNE,oCADM,SAIAG,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KACFC,EAASD,EAEXA,EAAKE,KAAI,SAAEC,GAAU,IAAD,EACpB,MAAO,CACL7B,GAAI6B,EAAI7B,GACRa,MAAOgB,EAAIhB,MACXQ,IAAG,UAAEQ,EAAIC,cAAN,aAAE,EAAYC,UAAUV,QAL7B,GAPe,kBAeZM,GAfY,yCAkBnBK,QAAQC,IAAR,MAlBmB,kBAmBZ,IAnBY,0DAAH,sDCGPC,EAAc,SAAC,GAAoB,IAAlBrB,EAAiB,EAAjBA,MAAOQ,EAAU,EAAVA,IACnC,OACE,sBAAKxB,UAAU,OAAf,UACE,qBAAKsC,IAAMd,EAAMe,IAAMvB,IACvB,4BAAKA,QCFEwB,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAExB,ECJsB,SAAEoB,GAExB,MAA0BC,mBAAS,CACjCb,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACR1B,EAASqB,GAAQM,MAAM,SAAEjB,GACvBe,EAAS,CACPhB,KAAMC,EACNa,SAAS,SAGZ,CAACF,IAEGG,EDZ0BI,CAAU3B,GAA9BY,EAAb,EAAQJ,KAAac,EAArB,EAAqBA,QAErB,OACE,gCACE,6BAAMtB,IACJsB,GAAW,wCACb,qBAAK3C,UAAU,YAAf,SAEIiC,EAAOF,KAAI,SAAEkB,GACX,OAAO,cAAC,EAAD,eAEAA,GADCA,EAAI9C,aEbX+C,EAAe,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,EAE1D,EAAoCT,mBAASS,GAA7C,mBAAOC,EAAP,KAAmBrD,EAAnB,KAEA,OACE,sBAAKC,UAAU,YAAf,UACE,gDACA,uBACA,cAAC,EAAD,CAAaD,cAAgBA,IAE3BqD,EAAWrB,KAAK,SAACV,EAAUgC,GACzB,OAAO,cAAC,EAAD,CAELhC,SAAWA,GADLgC,U,MCXlBC,IAASC,OACP,cAAC,EAAD,IACA/C,SAASgD,eAAe,W","file":"static/js/main.abaa7e13.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport Swal from 'sweetalert2'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  \r\n  const handleAddGifs = (e) =>  {\r\n    e.preventDefault();\r\n    \r\n    const searchInputRef = document.querySelector('#searchInput');\r\n    const { value:inputValue } = searchInputRef;\r\n\r\n    if( inputValue.length > 0 ) {\r\n      setCategories( (cats) => [ inputValue,  ...cats ]);\r\n      searchInputRef.value = '';\r\n    } else {\r\n      Swal.fire({\r\n        title: 'Error!',\r\n        text: 'Fill search box',\r\n        icon: 'error',\r\n        confirmButtonText: 'Ok'\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"searchRow\">\r\n        <input \r\n          type=\"text\" \r\n          placeholder=\"Find by name\"\r\n          id=\"searchInput\"\r\n        />\r\n        <button onClick={ handleAddGifs }>Add Gifs</button>\r\n      </div>      \r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async ( category ) => {\r\n  const apiKey = process.env.REACT_APP_GIFS_API_KEY;\r\n  try {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${ apiKey }`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = (!data)\r\n      ? []  \r\n      : data.map(( gif ) => {\r\n        return {\r\n          id: gif.id,\r\n          title: gif.title,\r\n          url: gif.images?.downsized.url,\r\n        }\r\n      });\r\n    return gifs;\r\n\r\n  } catch (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n};","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={ url } alt={ title }/>\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { useFetch } from '../hooks/useFetch';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  \r\n  const { data:images, loading } = useFetch( category );\r\n\r\n  return (\r\n    <div>\r\n      <h3>{ category }</h3>\r\n      { loading && <p>Loading</p> }\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map(( img ) => {\r\n            return <GifGridItem\r\n              key={ img.id }\r\n              { ...img }\r\n            />\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetch = ( query ) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs( query ).then( ( gifs ) => {\r\n      setState({\r\n        data: gifs,\r\n        loading: false\r\n      });\r\n    });\r\n  }, [query]);  \r\n\r\n  return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ({ defaultCategories = [] }) => {\r\n  \r\n  const [categories, setCategories] = useState(defaultCategories);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Gif Expert App</h1>\r\n      <hr />\r\n      <AddCategory setCategories={ setCategories } />\r\n      {\r\n        categories.map( (category, i) => {\r\n          return <GifGrid\r\n            key={ i }\r\n            category={ category }\r\n          />\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}